/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-fast-compare";
exports.ids = ["vendor-chunks/react-fast-compare"];
exports.modules = {

/***/ "(ssr)/../node_modules/react-fast-compare/index.js":
/*!***************************************************!*\
  !*** ../node_modules/react-fast-compare/index.js ***!
  \***************************************************/
/***/ ((module) => {

eval("/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */ var hasElementType = typeof Element !== \"undefined\";\nvar hasMap = typeof Map === \"function\";\nvar hasSet = typeof Set === \"function\";\nvar hasArrayBuffer = typeof ArrayBuffer === \"function\" && !!ArrayBuffer.isView;\n// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js\nfunction equal(a, b) {\n    // START: fast-deep-equal es6/index.js 3.1.3\n    if (a === b) return true;\n    if (a && b && typeof a == \"object\" && typeof b == \"object\") {\n        if (a.constructor !== b.constructor) return false;\n        var length, i, keys;\n        if (Array.isArray(a)) {\n            length = a.length;\n            if (length != b.length) return false;\n            for(i = length; i-- !== 0;)if (!equal(a[i], b[i])) return false;\n            return true;\n        }\n        // START: Modifications:\n        // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code\n        //    to co-exist with es5.\n        // 2. Replace `for of` with es5 compliant iteration using `for`.\n        //    Basically, take:\n        //\n        //    ```js\n        //    for (i of a.entries())\n        //      if (!b.has(i[0])) return false;\n        //    ```\n        //\n        //    ... and convert to:\n        //\n        //    ```js\n        //    it = a.entries();\n        //    while (!(i = it.next()).done)\n        //      if (!b.has(i.value[0])) return false;\n        //    ```\n        //\n        //    **Note**: `i` access switches to `i.value`.\n        var it;\n        if (hasMap && a instanceof Map && b instanceof Map) {\n            if (a.size !== b.size) return false;\n            it = a.entries();\n            while(!(i = it.next()).done)if (!b.has(i.value[0])) return false;\n            it = a.entries();\n            while(!(i = it.next()).done)if (!equal(i.value[1], b.get(i.value[0]))) return false;\n            return true;\n        }\n        if (hasSet && a instanceof Set && b instanceof Set) {\n            if (a.size !== b.size) return false;\n            it = a.entries();\n            while(!(i = it.next()).done)if (!b.has(i.value[0])) return false;\n            return true;\n        }\n        // END: Modifications\n        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n            length = a.length;\n            if (length != b.length) return false;\n            for(i = length; i-- !== 0;)if (a[i] !== b[i]) return false;\n            return true;\n        }\n        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n        // START: Modifications:\n        // Apply guards for `Object.create(null)` handling. See:\n        // - https://github.com/FormidableLabs/react-fast-compare/issues/64\n        // - https://github.com/epoberezkin/fast-deep-equal/issues/49\n        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === \"function\" && typeof b.valueOf === \"function\") return a.valueOf() === b.valueOf();\n        if (a.toString !== Object.prototype.toString && typeof a.toString === \"function\" && typeof b.toString === \"function\") return a.toString() === b.toString();\n        // END: Modifications\n        keys = Object.keys(a);\n        length = keys.length;\n        if (length !== Object.keys(b).length) return false;\n        for(i = length; i-- !== 0;)if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n        // END: fast-deep-equal\n        // START: react-fast-compare\n        // custom handling for DOM elements\n        if (hasElementType && a instanceof Element) return false;\n        // custom handling for React/Preact\n        for(i = length; i-- !== 0;){\n            if ((keys[i] === \"_owner\" || keys[i] === \"__v\" || keys[i] === \"__o\") && a.$$typeof) {\n                continue;\n            }\n            // all other properties should be traversed as usual\n            if (!equal(a[keys[i]], b[keys[i]])) return false;\n        }\n        // END: react-fast-compare\n        // START: fast-deep-equal\n        return true;\n    }\n    return a !== a && b !== b;\n}\n// end fast-deep-equal\nmodule.exports = function isEqual(a, b) {\n    try {\n        return equal(a, b);\n    } catch (error) {\n        if ((error.message || \"\").match(/stack|recursion/i)) {\n            // warn on circular references, don't crash\n            // browsers give this different errors name and messages:\n            // chrome/safari: \"RangeError\", \"Maximum call stack size exceeded\"\n            // firefox: \"InternalError\", too much recursion\"\n            // edge: \"Error\", \"Out of stack space\"\n            console.warn(\"react-fast-compare cannot handle circular refs\");\n            return false;\n        }\n        // some other error. we should definitely know about these\n        throw error;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/react-fast-compare/index.js\n");

/***/ })

};
;